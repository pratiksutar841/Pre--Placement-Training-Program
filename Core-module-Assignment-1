ðŸ’¡Q1.What is the difference between Compiler and Interpreter
   
 Compiler:
A compiler is a program that translates the entire source code of a program into machine code before execution.
In Java, the Java compiler (javac) takes the source code written in Java and translates 
it into bytecode, which is a low-level representation of the code that can be executed by the Java Virtual Machine (JVM).
The bytecode is platform-independent and can be run on any system that has a JVM installed. The compiled bytecode is usually stored in a file with a .class extension.
The compilation process consists of several steps: lexical analysis, syntax analysis, semantic analysis, code generation, and optimization.
During compilation, the compiler checks for syntax errors enforces language rules, and performs various optimizations to generate efficient code.
Once the compilation is successful, the resulting bytecode can be executed repeatedly without recompiling unless changes are made to the source code.

Interpreter:
An interpreter, on the other hand, executes the source code directly without prior translation into machine code. 
In Java, the Java interpreter (java) reads the bytecode generated by the compiler line by line and executes it sequentially.
The interpreter translates each bytecode instruction into machine code or performs the required actions directly.
The interpretation process involves reading and executing the code line by line, which allows for immediate feedback in case of errors or exceptions. 
Interpreted programs are generally slower than compiled programs because the interpreter needs to perform translation and execution simultaneously,
which incurs additional overhead.
=============================================================================================================================================================================

ðŸ’¡ Q2.What is the difference between JDK, JRE, and JVM?
    JDK (Java Development Kit):
    The JDK is a software development kit that provides the necessary tools, libraries, and executables for developing Java applications.
    It includes the Java compiler (javac) that translates Java source code into bytecode, as well as other tools
    like debugger, documentation generator, and various utilities. The JDK also includes the JRE (Java Runtime Environment).

    JRE (Java Runtime Environment):
    The JRE is an environment that allows the execution of Java applications.
    It consists of the Java Virtual Machine (JVM) and a set of libraries and runtime components required to run Java programs. 
    The JRE does not include development tools like compilers and debuggers, as those are part of the JDK.

    JVM (Java Virtual Machine):
    The JVM is an integral part of the Java platform and is responsible for executing Java bytecode. 
    It is a virtual machine that provides an abstraction layer between the Java program and the underlying hardware and operating system. 
    The JVM interprets the bytecode or just-in-time (JIT) and compiles it into machine code for the specific platform on which it is running.

=============================================================================================================================================================================
ðŸ’¡ Q3.How many types of memory areas are allocated by JVM?
     two kinds of memory
      1. Heap memory
      2. Non-Heap-memory

=============================================================================================================================================================================

ðŸ’¡ Q4.What is JIT compiler?
   It stands for Just-In-Time. In the context of Java, a JIT compiler is a component of the Java Virtual Machine (JVM) that dynamically compiles bytecode into
   machine code at runtime. When a Java program is executed, the JVM initially interprets the bytecode instruction by instruction, which can be slower
  compared to native machine code execution. However, to improve performance, modern JVMs employ a technique called Just-In-Time compilation.

============================================================================================================================================================================
ðŸ’¡ Q5.What are the various access specifiers in Java?
In Java, access specifiers are keywords used to define the accessibility and visibility of classes, methods, variables, and constructors.
There are four access specifiers available in Java:

public:
The public access specifier allows unrestricted access from anywhere in the program.
Classes, methods, variables, and constructors declared as public can be accessed by any other class or code in the same project or even in external projects.

private:
The private access specifier restricts access to only within the same class. 
Private members cannot be accessed or modified from outside the class in which they are declared. 
This is often used to encapsulate implementation details and provide data hiding.

protected:
The protected access specifier allows access within the same package and from subclasses, even if they are in different packages. 
Protected members are not accessible to unrelated classes in different packages that do not inherit from the class.

default (no modifier):
If no access specifier is specified, which is often referred to as the default access, it allows access within the same package only.
Members with default access can be accessed by any class within the same package but are not accessible from outside the package.
============================================================================================================================================================================
ðŸ’¡ Q6.What is a compiler in Java?
a compiler is a software tool that translates human-readable source code written in the Java programming language into a lower-level representation known as bytecode.
The compiler is responsible for converting the Java source code, which is written in plain text, into a format that can be executed by the Java Virtual Machine (JVM).
============================================================================================================================================================================
ðŸ’¡ Q7.Explain the types of variables in Java.
In Java, variables are used to store data or values that can be manipulated within a program.
Java supports several types of variables based on their scope and behaviour. Here are the main types of variables in Java:

Local Variables:
Local variables are declared within a method, constructor, or a block of code. 
They are only accessible within the scope where they are declared. Local variables must be initialized before they are used.
They don't have default values and are created when the block of code is entered and destroyed when the block is exited.

Instance Variables:
Instance variables, also known as non-static variables, are declared within a class but outside any method or constructor. 
They are associated with an instance or object of the class. Each instance of the class has its own copy of instance variables.
Instance variables are initialized with default values if not explicitly assigned.

Static Variables (Class Variables):
Static variables are declared with the static keyword. They are associated with the class itself rather than with instances of the class.
Static variables are shared among all instances of the class and can be accessed directly using the class name. 
They are initialized with default values if not explicitly assigned.

Parameters:
Parameters are variables that are passed into methods or constructors. 
They allow values to be passed into a method or constructor when it is called.
Parameters are local variables within the method or constructor and are assigned the values passed during the method or constructor invocation.

Final Variables:
Final variables are declared with the final keyword. Once assigned, their value cannot be changed. 
Final variables must be initialized either at the time of declaration or within the constructor. They are often used for constants or values that should not be modified.

Class Constants:
Class constants are declared with the final and static keywords. They are static variables that store constant values shared among all instances of the class.
Class constants are typically declared using uppercase letters and underscore (_) to separate words, and they provide a way to define meaningful names
for constants in the code.
============================================================================================================================================================================
ðŸ’¡ Q8.What are the Datatypes in Java?
Primitive Data Types:

boolean: Represents a boolean value, either true or false.
byte: Represents a signed 8-bit integer value.
short: Represents a signed 16-bit integer value.
int: Represents a signed 32-bit integer value.
long: Represents a signed 64-bit integer value.
float: Represents a single-precision 32-bit floating-point value.
double: Represents a double-precision 64-bit floating-point value.
char: Represents a single Unicode character.
Reference Data Types:

Classes: Java is an object-oriented language, so reference data types include classes that you define.
Arrays: Represents a collection of elements of the same type.
Interfaces: Represents a contract of methods and constants that classes can implement.
Derived Data Types:

String: Represents a sequence of characters. Although not a primitive type, it is widely used and has special support in Java.
============================================================================================================================================================================
ðŸ’¡ Q9.What are the identifiers in Java?
In Java, identifiers are names used to identify various elements such as variables, classes, methods, packages, and interfaces. 
An identifier is a sequence of characters that follows certain rules and conventions. Here are the main characteristics of identifiers in Java:

Naming Rules:

Identifiers must start with a letter (a to z or A to Z), underscore (_), or a dollar sign ($). The first character cannot be a digit.
After the first character, identifiers can contain letters, digits (0 to 9), underscores, and dollar signs.
Identifiers are case-sensitive, meaning that uppercase and lowercase letters are considered different. For example, myVariable and myvariable are two distinct identifiers.
Naming Conventions:

It is recommended to use meaningful and descriptive names for identifiers to enhance code readability.
Use the camelCase convention for variable and method names, starting with a lowercase letter (e.g., myVariable, calculateSum()).
Use the PascalCase convention for class and interface names, starting with an uppercase letter (e.g., MyClass, MyInterface).
Constants (final variables) are typically written in uppercase with underscores (e.g., MAX_VALUE, PI).
Avoid using reserved keywords as identifiers. Java has a set of reserved keywords that have predefined meanings and cannot be used as identifiers.
Length Limitation:

Java imposes no fixed limit on the length of identifiers, but it is recommended to keep them reasonably short and meaningful.
===========================================================================================================================================================================
ðŸ’¡ Q10.Explain the architecture of JVM
The architecture of the Java Virtual Machine (JVM) is a key component of the Java platform that enables the execution of Java bytecode.
The JVM acts as an intermediary between the Java programs and the underlying operating system and hardware. Here's an overview of the JVM architecture:

Class Loader:
The class loader subsystem is responsible for loading Java classes into memory.
It reads compiled Java bytecode (stored in .class files) and creates a runtime representation of classes and interfaces.
The class loader performs tasks such as bytecode verification, linking, and initialization.

Runtime Data Areas:
The JVM divides the memory into several runtime data areas, each serving a specific purpose:

Method Area: The method area stores the runtime representation of classes, including field data, method bytecode, and constant pool.
Heap: The heap is a runtime data area used for dynamic memory allocation. It is where objects and arrays are allocated.
Java Stack: Each thread in a Java program has its own stack, used for method calls and storing local variables and method data.
PC Registers: PC (Program Counter) registers hold the address of the currently executing instruction for each thread.
Native Method Stack: The native method stack is used for executing native code, written in other languages (e.g., C or C++).
Execution Engine:
The execution engine executes the bytecode instructions. It consists of two main components:

Interpreter: The interpreter reads bytecode instructions line by line and executes them.
It is responsible for executing platform-independent bytecode, but it can be slower than native execution.
Just-In-Time (JIT) Compiler: The JIT compiler dynamically compiles frequently executed bytecode into machine code for specific hardware platforms. 
This optimized machine code improves execution speed.
Garbage Collector:
The garbage collector is responsible for automatic memory management. It identifies and reclaims memory that is no longer in use by the program, freeing up resources.
The JVM includes different garbage collection algorithms to efficiently manage memory and minimize pauses.

Native Method Interface (JNI):
The Native Method Interface (JNI) allows Java programs to interact with native code libraries and platforms. It provides a bridge between the Java
programming language and other programming languages.
============================================================================================================================================================================
