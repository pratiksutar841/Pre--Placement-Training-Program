Q1. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
    You may assume that each input would have exactly one solution, and you may not use the same element twice.
    You can return the answer in any order.
    Example:
    Input: nums = [2,7,11,15], target = 9
    Output0 [0,1]
   Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1][

import java.util.HashMap;

public class TwoSum {
    public int[] twoSum(int[] nums, int target) {
        // Create a HashMap to store the complement of each number and its index
        HashMap<Integer, Integer> complementMap = new HashMap<>();

        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            // If the complement exists in the map, return its index and the current index
            if (complementMap.containsKey(complement)) {
                return new int[] { complementMap.get(complement), i };
            }
            
            // Otherwise, add the current number and its index to the map
            complementMap.put(nums[i], i);
        }
        
        // If no solution is found, return an empty array
        return new int[0];
    }

    public static void main(String[] args) {
        int[] nums = { 2, 7, 11, 15 };
        int target = 9;

        TwoSum solution = new TwoSum();
        int[] indices = solution.twoSum(nums, target);

        System.out.println("[" + indices[0] + ", " + indices[1] + "]");
    }
}
===================================================================================================================================================================================================================
Q2. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
     Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
    - Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
    - Return k.
    Example :
    Input: nums = [3,2,2,3], val = 3
    Output: 2, nums = [2,2,_*,_*]

**Explanation:** Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)[

public class RemoveElement {
    public int removeElement(int[] nums, int val) {
        int k = 0; // Number of elements not equal to val
        
        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            // If the current element is not equal to val, update the nums array
            if (nums[i] != val) {
                nums[k] = nums[i];
                k++;
            }
        }
        
        return k;
    }

    public static void main(String[] args) {
        int[] nums = { 3, 2, 2, 3 };
        int val = 3;

        RemoveElement solution = new RemoveElement();
        int k = solution.removeElement(nums, val);

        System.out.println("k = " + k);
        System.out.print("nums = [");
        for (int i = 0; i < k; i++) {
            System.out.print(nums[i]);
            if (i < k - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}
===================================================================================================================================================================================================================
Q3. Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], target = 5
Output: 2

public class SearchInsertPosition {
    public int searchInsert(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        // At this point, the target was not found in the array
        // The left variable represents the index where the target should be inserted
        return left;
    }

    public static void main(String[] args) {
        int[] nums = { 1, 3, 5, 6 };
        int target = 5;

        SearchInsertPosition solution = new SearchInsertPosition();
        int index = solution.searchInsert(nums, target);

        System.out.println("Index: " + index);
    }
}


==================================================================================================================================================================================================================
Q4. You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most
    significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
    Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.

Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

public class PlusOne {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        
        // Traverse the digits array from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Increment the current digit by 1
            digits[i]++;
            
            // If the digit is less than 10, there is no carry, so return the updated array
            if (digits[i] < 10) {
                return digits;
            }
            
            // If the digit is 10, set it to 0 and continue to the next digit
            digits[i] = 0;
        }
        
        // If we reach this point, it means all digits were 9, and we have a carry to the most significant digit
        int[] result = new int[n + 1];
        result[0] = 1; // Set the most significant digit to 1
        return result;
    }

    public static void main(String[] args) {
        int[] digits = { 1, 2, 3 };

        PlusOne solution = new PlusOne();
        int[] result = solution.plusOne(digits);

        System.out.print("Result: ");
        for (int digit : result) {
            System.out.print(digit + " ");
        }
        System.out.println();
    }
}


==================================================================================================================================================================================================================
Q5. You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements
that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

**Example 1:**
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

**Explanation:** The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

public class MergeSortedArray {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1; // Index for the last element of nums1
        int j = n - 1; // Index for the last element of nums2
        int k = m + n - 1; // Index for the last position of the merged array
        
        // Merge nums1 and nums2 from right to left
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }
        
        // Copy any remaining elements from nums2 to nums1 if necessary
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }
    }

    public static void main(String[] args) {
        int[] nums1 = { 1, 2, 3, 0, 0, 0 };
        int m = 3;
        int[] nums2 = { 2, 5, 6 };
        int n = 3;

        MergeSortedArray solution = new MergeSortedArray();
        solution.merge(nums1, m, nums2, n);

        System.out.print("Merged Array: ");
        for (int num : nums1) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

==================================================================================================================================================================================================================
Q6.Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true

import java.util.HashSet;

public class ContainsDuplicate {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        
        for (int num : nums) {
            // If the set already contains the current element, it means it's a duplicate
            if (set.contains(num)) {
                return true;
            }
            
            // Add the current element to the set
            set.add(num);
        }
        
        // No duplicates found
        return false;
    }

    public static void main(String[] args) {
        int[] nums = { 1, 2, 3, 1 };

        ContainsDuplicate solution = new ContainsDuplicate();
        boolean containsDuplicate = solution.containsDuplicate(nums);

        System.out.println("Contains Duplicate: " + containsDuplicate);
    }
}

==================================================================================================================================================================================================================
Q7. Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

public class MoveZeroes {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int i = 0; // Pointer for iterating over the array
        
        // Move all the nonzero elements to the front of the array
        for (int num : nums) {
            if (num != 0) {
                nums[i] = num;
                i++;
            }
        }
        
        // Fill the remaining positions with zeros
        while (i < n) {
            nums[i] = 0;
            i++;
        }
    }

    public static void main(String[] args) {
        int[] nums = { 0, 1, 0, 3, 12 };

        MoveZeroes solution = new MoveZeroes();
        solution.moveZeroes(nums);

        System.out.print("Result: ");
        for (int num : nums) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

=================================================================================================================================================================================================================
Q8. You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set,
which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

**Example 1:**
Input: nums = [1,2,2,4]
Output: [2,3]

import java.util.HashSet;

public class FindErrorNums {
    public int[] findErrorNums(int[] nums) {
        int[] result = new int[2];
        HashSet<Integer> set = new HashSet<>();

        int n = nums.length;
        int duplicate = 0;
        int sum = (n * (n + 1)) / 2; // Sum of 1 to n

        for (int num : nums) {
            // If the set already contains the current number, it is the duplicate
            if (set.contains(num)) {
                duplicate = num;
            }
            
            sum -= num; // Subtract the current number from the sum
            set.add(num); // Add the current number to the set
        }

        result[0] = duplicate; // The number that occurs twice
        result[1] = sum + duplicate; // The missing number

        return result;
    }

    public static void main(String[] args) {
        int[] nums = { 1, 2, 2, 4 };

        FindErrorNums solution = new FindErrorNums();
        int[] result = solution.findErrorNums(nums);

        System.out.print("Result: ");
        for (int num : result) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

=================================================================================================================================================================================================================
