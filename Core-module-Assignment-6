ðŸ’¡ Q1.What is Collection in Java?
In Java, a collection refers to a group of objects or elements that are stored and manipulated together as a single unit.
The Java Collections Framework provides a set of interfaces, classes, and algorithms to work with collections efficiently.
Collections are used to organize, store, and process data in various ways. They can be used to perform operations like adding, 
removing, searching, and iterating over elements. The Java Collections Framework includes several interfaces such as List, Set, 
Queue, and Map, along with their respective implementations, to cater to different collection needs.
===================================================================================================================================================
ðŸ’¡ Q2. Differentiate between Collection and collections in the context of Java.
Collection (capital "C"): Collection is an interface defined in the Java Collections Framework. 
It is the root interface of the framework hierarchy and represents a group of objects or elements. 
The Collection interface provides basic functionality for adding, removing, and accessing elements in a collection.
It extends the Iterable interface, allowing for easy iteration over the elements. Examples of classes that implement the Collection 
interface include List, Set, and Queue.

collections (lowercase "c"): "collections" refers to the broader concept of collections in Java, 
which encompasses both the interfaces and classes provided by the Java Collections Framework. 
It includes the Collection interface along with other interfaces like List, Set, Queue, Map, as well as their 
respective implementations and utility classes.
===================================================================================================================================================
ðŸ’¡ Q3. What are the advantages of the Collection framework?
  1. Reusability and Interoperability
  2. Abstraction and Polymorphism
  3. Efficiency and Performance
  4. Type Safety
===================================================================================================================================================
ðŸ’¡ Q4.Explain the various interfaces used in the Collection framework.
Collection: The Collection interface is the root interface of the framework hierarchy.
It represents a group of objects or elements. It defines basic operations such as adding, removing, and accessing elements.
Common methods in the Collection interface include add, remove, contains, size, isEmpty, and iterator. Subinterfaces of Collection
include List, Set, and Queue.

List: The List interface extends the Collection interface and represents an ordered collection of elements.
It allows duplicate elements and maintains the insertion order. Lists can be accessed by index and provide 
methods for positional access, such as get, set, add, remove, and indexOf. Common implementations of List include ArrayList, 
LinkedList, and Vector.

Set: The Set interface extends the Collection interface and represents a collection of unique elements. 
It does not allow duplicate elements. Sets do not maintain any specific order. Common methods in the Set interface include add, 
remove, contains, size, and isEmpty. Common implementations of Set include HashSet, TreeSet, and LinkedHashSet.
===================================================================================================================================================
ðŸ’¡ Q5.Differentiate between List and Set in Java.
In Java, both List and Set are interfaces that extend the Collection interface and represent different types of collections.
Here are the main differences between List and Set:

Duplicate Elements: List allows duplicate elements, whereas Set does not. 
In a List, you can have multiple elements with the same value, while a Set ensures that all elements are unique.

Ordering: List maintains the order of elements as they are inserted. It allows positional access to elements through indices.
On the other hand, Set does not guarantee any specific order of elements. Sets are primarily concerned with uniqueness rather
than the order in which elements are added.

Accessing Elements: Since List maintains the order of elements, you can access elements by their index using methods 
like get(index) and perform positional operations like add(index, element) or remove(index). 
Set does not provide direct index-based access to elements because it does not maintain a specific order. 
Instead, you typically use methods like contains(element) to check for element existence.
=================================================================================================================================================
ðŸ’¡ Q6.What is the Differentiate between Iterator and ListIterator in Java.
In Java, both Iterator and ListIterator are interfaces that provide a way to iterate over elements in a collection.
However, there are some key differences between them:

Collection Type: Iterator is a general-purpose interface that can be used to iterate over elements in any collection
implementing the Collection interface. ListIterator, on the other hand, is a more specialized interface that is specifically 
designed for iterating over elements in List collections.

Direction: Iterator allows only forward iteration through a collection, moving from the first element to the last. 
It provides methods like hasNext() to check if there are more elements and next() to retrieve the next element. ListIterator, 
in addition to forward iteration, provides bidirectional iteration. It allows both forward and backward movement through a list, 
enabling methods like hasPrevious(), previous(), nextIndex(), and previousIndex().

Modification: Iterator allows removal of elements during iteration using the remove() method. It removes the last element 
returned by the iterator. ListIterator, in addition to removal, allows modification of elements. It provides methods like set() to replace
the last element returned by the iterator and add() to insert a new element at the current position.

Positional Access: ListIterator provides methods for direct positional access to elements in a list. It includes methods like
next(), previous(), set(), and add(), which can be used to manipulate elements based on their indices. Iterator does not provide 
direct positional access to elements.

Implementation Support: The Iterator interface is implemented by various collection classes, including List, Set, and Queue implementations.
It provides a standard way to iterate over elements in any collection. ListIterator, however, is only implemented by List collections.
It provides additional functionality specific to lists, such as positional access and bidirectional iteration.
==================================================================================================================================================
ðŸ’¡ Q7.What is the Differentiate between Comparable and Comparator
In Java, both Comparable and Comparator are interfaces that provide mechanisms for sorting objects. 
However, there are some key differences between them:

Implementation: The Comparable interface is implemented by the class of the objects being sorted.
It provides a natural ordering for the objects. On the other hand, the Comparator interface is a separate class 
that is used to define custom comparison logic for objects that do not implement Comparable or to provide alternative 
comparison logic for objects that do implement Comparable.

Object's Class: Comparable is tied to the class of the objects being compared. The compareTo() method, defined 
in the Comparable interface, is implemented within the class itself and determines the natural ordering of the objects.
In contrast, Comparator is a separate class that can be used to compare objects of different classes or provide different
comparison logic for objects of the same class.

Single vs. Multiple Comparisons: Comparable allows for a single, natural ordering of objects. 
The compareTo() method defines the default comparison behavior. In contrast, Comparator allows for 
multiple ways of comparing objects. Different Comparator implementations can define different comparison 
logic and enable sorting objects based on various criteria.

Modifications to Existing Classes: When using Comparable, the class being sorted needs to implement
the Comparable interface, which may require modifying the class code. This is suitable when you have control
over the class definition. Comparator, however, allows sorting of objects without modifying their class definition.
It provides more flexibility and is often used when working with classes from external libraries or when multiple 
comparison criteria are required.

Usage Flexibility: Comparable is primarily used for natural ordering, where there is a well-defined and inherent
ordering of objects. It is automatically used by certain Java APIs, such as sorting objects in collections like
TreeSet or Collections.sort(). Comparator, on the other hand, allows for custom sorting logic that can be defined separately
from the objects being sorted. It provides more control over the sorting process and can be used in various scenarios.
=================================================================================================================================================
ðŸ’¡ Q8.What is collision in HashMap?
In the context of a HashMap in Java, a collision occurs
when two or more different keys hash to the same index or bucket in the underlying array structure used to store key-value pairs.
=================================================================================================================================================
ðŸ’¡ Q9.Distinguish between a hashmap and a Treemap.
HashMap and TreeMap are both implementations of the Map interface in Java, but they have some important differences:

Ordering: TreeMap is a sorted map implementation, meaning that it maintains the keys in sorted order based on their 
natural ordering or a custom comparator. On the other hand, HashMap does not provide any inherent ordering of the keys.
It does not guarantee any specific order of key-value pairs during iteration.

Performance: HashMap typically offers better performance for most operations compared to TreeMap. HashMap provides constant-time 
performance (O(1)) for basic operations like insertion, retrieval, and removal on average, assuming a good hash function and a proper
initial capacity. TreeMap, being a sorted map, has logarithmic time complexity (O(log n)) for these operations since it needs to 
maintain the keys in sorted order.

Iteration: If the order of keys is important, TreeMap is preferable since it allows iteration over the keys in sorted order.
HashMap does not provide a specific order during iteration.

Key Requirements: HashMap allows null keys and can have one null key at most. TreeMap, however, does not allow null keys 
since it relies on key comparisons for sorting. TreeMap requires keys to implement the Comparable interface or be provided 
with a custom comparator for sorting.

Memory Overhead: HashMap generally has a lower memory overhead compared to TreeMap. HashMap uses an array-based structure 
combined with linked lists (or balanced trees in Java 8+) for handling collisions. TreeMap uses a balanced red-black tree structure,
which requires additional memory for maintaining the tree structure.

Use Cases: HashMap is suitable for most scenarios where the order of keys is not important, and fast insertion, retrieval,
and removal operations are desired. It is commonly used for general-purpose mapping. TreeMap is useful when the keys need 
to be maintained in sorted order or when specific operations like finding the nearest key or range-based queries are required.
It is commonly used for applications that require sorted maps or ordered data structures.
==================================================================================================================================================
ðŸ’¡ Q10.Define LinkedHashMap in Java
In Java, LinkedHashMap is a class that extends HashMap and provides a map implementation that maintains the insertion order of its elements.
It combines the features of a HashMap with a doubly-linked list to keep track of the order in which key-value pairs were added to the map.
=================================================================================================================================================
